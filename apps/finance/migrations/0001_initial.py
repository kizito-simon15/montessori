# Generated by Django 4.2.21 on 2025-07-04 22:44

import datetime
from decimal import Decimal
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('students', '0001_initial'),
        ('staffs', '0001_initial'),
        ('corecode', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Budget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('category', models.CharField(choices=[('ANNUAL', 'Annual'), ('MONTHLY', 'Monthly'), ('TERM', 'Per Term'), ('SEASONAL', 'Seasonal')], default='TERM', max_length=10)),
                ('allocated_amount', models.DecimalField(decimal_places=2, max_digits=14)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Deduction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=200)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12)),
            ],
            options={
                'ordering': ['salary_invoice', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invoice_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('invoice_amount', models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=12)),
                ('due_date', models.DateField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('active', 'Active'), ('closed', 'Closed')], default='draft', max_length=10)),
                ('balance_from_previous_install', models.DecimalField(decimal_places=2, default=0, editable=False, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-created_at', 'student__surname'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('TUITION', 'Tuition'), ('TRANSPORT', 'Transport'), ('UNIFORM', 'Uniform'), ('OTHER', 'Other')], default='TUITION', max_length=20)),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('amount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
            ],
            options={
                'ordering': ['invoice', 'description'],
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receipt_number', models.CharField(blank=True, max_length=50, unique=True)),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=11)),
                ('date_paid', models.DateField(default=django.utils.timezone.now)),
                ('payment_method', models.CharField(choices=[('NMB_BANK', 'NMB Bank'), ('CRDB_BANK', 'CRDB Bank'), ('MOBILE', 'Mobile Payment'), ('CASH', 'Cash')], max_length=20)),
                ('transaction_reference', models.CharField(blank=True, max_length=100)),
                ('comment', models.CharField(blank=True, max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date_paid'],
                'get_latest_by': 'date_paid',
            },
        ),
        migrations.CreateModel(
            name='SalaryInvoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('month', models.DateField(default=datetime.date.today)),
                ('basic_salary', models.DecimalField(decimal_places=2, max_digits=12)),
                ('special_allowance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('allowance', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('paye_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('gross_salary', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('nssf_amount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('wcf_amount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('helsb_amount', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('net_salary', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('total_given_salary', models.DecimalField(decimal_places=2, editable=False, max_digits=12)),
                ('issued_date', models.DateField(default=datetime.date.today)),
                ('remarks', models.TextField(blank=True)),
            ],
            options={
                'ordering': ['-month', '-issued_date'],
            },
        ),
        migrations.CreateModel(
            name='SchoolFees',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('BOARDING', 'Boarding / Hostel'), ('DAY_BUS', 'Day (School Bus)'), ('DAY_WALK', 'Day (Walk / Self)')], max_length=20)),
                ('annual_amount', models.DecimalField(decimal_places=2, max_digits=12)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['session__name', 'category'],
            },
        ),
        migrations.CreateModel(
            name='StudentUniform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'ordering': ['student__surname'],
            },
        ),
        migrations.CreateModel(
            name='Uniform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('price', models.DecimalField(decimal_places=2, editable=False, max_digits=10)),
            ],
            options={
                'ordering': ['student__surname', 'uniform_type__name'],
            },
        ),
        migrations.CreateModel(
            name='UniformType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddConstraint(
            model_name='uniformtype',
            constraint=models.CheckConstraint(check=models.Q(('price__gte', 0)), name='uniform_price_non_negative'),
        ),
        migrations.AddField(
            model_name='uniform',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.academicsession'),
        ),
        migrations.AddField(
            model_name='uniform',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uniforms', to='students.student'),
        ),
        migrations.AddField(
            model_name='uniform',
            name='student_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.studentclass'),
        ),
        migrations.AddField(
            model_name='uniform',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.academicterm'),
        ),
        migrations.AddField(
            model_name='uniform',
            name='uniform_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='finance.uniformtype'),
        ),
        migrations.AddField(
            model_name='studentuniform',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.academicsession'),
        ),
        migrations.AddField(
            model_name='studentuniform',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_uniforms', to='students.student'),
        ),
        migrations.AddField(
            model_name='studentuniform',
            name='student_class',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.studentclass'),
        ),
        migrations.AddField(
            model_name='studentuniform',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='corecode.academicterm'),
        ),
        migrations.AddField(
            model_name='schoolfees',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='school_fees', to='corecode.academicsession'),
        ),
        migrations.AddField(
            model_name='salaryinvoice',
            name='budget',
            field=models.ForeignKey(help_text='Which budget envelope funds this payslip?', on_delete=django.db.models.deletion.PROTECT, related_name='salary_invoices', to='finance.budget'),
        ),
        migrations.AddField(
            model_name='salaryinvoice',
            name='staff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='salary_invoices', to='staffs.staff'),
        ),
        migrations.AddField(
            model_name='receipt',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='receipts', to='finance.invoice'),
        ),
        migrations.AddField(
            model_name='receipt',
            name='received_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='received_receipts', to='staffs.staff'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='finance.invoice'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='class_for',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='corecode.studentclass'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='installment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='corecode.installment'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='school_fees',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='invoices', to='finance.schoolfees'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='corecode.academicsession'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='student',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='students.student'),
        ),
        migrations.AddField(
            model_name='deduction',
            name='salary_invoice',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deductions', to='finance.salaryinvoice'),
        ),
        migrations.AddField(
            model_name='budget',
            name='installment',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='corecode.installment'),
        ),
        migrations.AddField(
            model_name='budget',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='corecode.academicsession'),
        ),
        migrations.AddField(
            model_name='budget',
            name='term',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='corecode.academicterm'),
        ),
        migrations.AddConstraint(
            model_name='uniform',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gt', 0)), name='uniform_quantity_positive'),
        ),
        migrations.AddConstraint(
            model_name='studentuniform',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 0)), name='student_uniform_amount_positive'),
        ),
        migrations.AddConstraint(
            model_name='studentuniform',
            constraint=models.UniqueConstraint(fields=('student', 'session', 'term', 'student_class'), name='unique_student_uniform_payment'),
        ),
        migrations.AddConstraint(
            model_name='schoolfees',
            constraint=models.CheckConstraint(check=models.Q(('annual_amount__gt', 0)), name='fees_positive'),
        ),
        migrations.AlterUniqueTogether(
            name='schoolfees',
            unique_together={('session', 'category')},
        ),
        migrations.AddConstraint(
            model_name='salaryinvoice',
            constraint=models.CheckConstraint(check=models.Q(('basic_salary__gt', 0)), name='basic_salary_positive'),
        ),
        migrations.AddConstraint(
            model_name='salaryinvoice',
            constraint=models.UniqueConstraint(fields=('staff', 'month'), name='unique_salary_per_month'),
        ),
        migrations.AddConstraint(
            model_name='salaryinvoice',
            constraint=models.CheckConstraint(check=models.Q(('paye_amount__gte', 0)), name='paye_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='receipt',
            constraint=models.CheckConstraint(check=models.Q(('amount_paid__gt', 0)), name='receipt_amt_positive'),
        ),
        migrations.AddConstraint(
            model_name='receipt',
            constraint=models.CheckConstraint(check=models.Q(('amount_paid__lte', Decimal('999999999.99'))), name='receipt_amt_ceiling'),
        ),
        migrations.AddConstraint(
            model_name='invoiceitem',
            constraint=models.CheckConstraint(check=models.Q(('quantity__gt', 0)), name='invitem_qty_positive'),
        ),
        migrations.AddConstraint(
            model_name='invoiceitem',
            constraint=models.CheckConstraint(check=models.Q(('unit_price__gt', 0)), name='invitem_price_positive'),
        ),
        migrations.AddConstraint(
            model_name='invoice',
            constraint=models.CheckConstraint(check=models.Q(('invoice_amount__gt', 0)), name='inv_amount_positive'),
        ),
        migrations.AddConstraint(
            model_name='invoice',
            constraint=models.UniqueConstraint(fields=('student', 'session', 'installment'), name='unique_invoice_per_installment'),
        ),
        migrations.AddConstraint(
            model_name='deduction',
            constraint=models.CheckConstraint(check=models.Q(('amount__gte', 0)), name='deduction_amount_non_negative'),
        ),
        migrations.AddConstraint(
            model_name='budget',
            constraint=models.CheckConstraint(check=models.Q(('allocated_amount__gt', 0)), name='budget_allocated_positive'),
        ),
    ]
